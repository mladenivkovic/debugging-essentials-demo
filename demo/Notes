01 gdb-basics
=======================

1) Show program contents
2) MENTION DEBUG FLAGS
3) run program without gdb
4) run program with gdb
    show `run`
5) make breakpoint at main.c:32
    bt
    list
    p i
    p i + 1
    p i + 1 + 2 * i
    p arr[i]
    p arr
    p st
    n
    c
    info break
    del 1
6) make breakpoint at includes/my_includes.h:14

also possible: go through line by line with n, then
step into do_stuff function with s
then let function `finish`


02 gdb --args
========================

1) Show program. It crashes without cmdline args.
2) Run program with gdb without --args.
3) Run program in gdb with run --args a b c
4) run program with gdb --args



03 Set breakpoint at a function
=====================================

Particularly useful if you have a function to handle exits in your program.

1) Show program. We call function when error occurs.
2) Make breakpoint at error.h:error_exit



04 Demo for breakpoint with conditional
========================================

1) Show program
2) Make breakpoint at main.c:10 if i==5




05 Demo for gdb with reverse
==============================

1) Show program
2) Make breakpoint at main.c:6 and main.c:12

NOTE: must turn off optimization.

2.1) First breakpoint: `record`
2.2) reverse-step

 



06 Demo Watchpoint 
==============================

1) Show program
2) Make watchpoint at sum: `watch sum`
3) Show “in scope”: move declaration of `sum` into `main()`. Make breakpoint at `main()` first.




07 Demo GDB Frames Navigation
==============================

1) Show program
2) break at main.c:6
3) Show backtrace, navigate through frames, show `a`




08 Demo for gdb segfault
=============================

1) run program without gdb
2) run program with gdb
   run
   backtrace




09 GDB Core Dumps
=============================

Same as demo for gdb segfault

Run CONTENTS OF disable_core_dumps.sh first (script doesn't work)
crash program
Run CONTENTS OF enable_core_dumps.sh first (script doesn't work)
crash program
load up core dump with gdb:
    - get path from get_coredump_path.sh
    - gdb -c path/file ./ex



10 GDB optimization
===========================

same as demo for gdb segfault backtrace, 
1) moved for loop into function
2) added optimization flag -O3

Show that values can be optimized out

Idea: Show that single function can have optimization turned off



11 Demo to catch FPEs
=================================

1) run program without gdb
2) activate stuff to get FPEs to cause errors (define and include in header, feenableexcept)
3) run again without gdb
4) run again with gdb





12 gdb-MPI
===============================

First show contents of main.c
Rank 2 should crash after 20s



13 Demo Valgrind
==========================

1) Compile and run. Nothing should happen. (Segfault may happen)
2) run with valgrind ./ex
2) run with valgrind --leak-checks=full ./ex



14 Demo address sanitizer
==========================

1) Compile and run. 
2) Fix out-of-bounds access. Run again.
3) Show memory leak detected.


